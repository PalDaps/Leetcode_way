#include <vector>
#include <iostream>

/*

01.08.2025
9:35

Задача: Дана двумерная матрица, которая отсортирована по следующему приницпу: числа во всех строках возрастают.
Числа во всех столбацах возратсают. Нужно найти в ней определенное число.

Идея: Начать искать target с правого верхнего угла. Если текущее число в матрице меньше, чем target, то переходим на 
следующую строку, иначе уменьшаем столбец. Учесть частные случаи) size_t -> int.

P.S. 10:23 Оч красивое решение.

*/

class Solution
{
public:
    bool searchMatrix(std::vector<std::vector<int>>& matrix, int target)
    {
        size_t Rows = matrix.size();
        size_t Cols = matrix[0].size();

        int i = 0, j = Cols - 1;
        while (i < Rows && j >= 0)
        {
            if (target == matrix[i][j]) return true;
            else if (target > matrix[i][j]) i++;
            else if (target < matrix[i][j]) j--;
        }

        return false;
    }
};

/*

Рекурсивная версия

01.08.2025
10:27

Задача: Дана двумерная матрица, которая отсортирована по следующему приницпу: числа во всех строках возрастают.
Числа во всех столбацах возратсают. Нужно найти в ней определенное число.

Идея: Начать искать target с правого верхнего угла. Если текущее число в матрице меньше, чем target, то переходим на
следующую строку, иначе уменьшаем столбец. Учесть частные случаи) size_t -> int.

P.S. 10:23 Оч красивое решение.

*/

int main()
{
    std::vector<std::vector<int>> Martix = { {-5} };
    Solution Daps;
    Daps.searchMatrix(Martix, -10);
    return 0;
}
