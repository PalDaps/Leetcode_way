#include <iostream>
#include <vector>

/*
29.04.2025
21:34

Задача: Тимо аткаует персонажа Эш. Дается входной массив с таймингами аткаки Тимо и значение продолжительности отравления. 
Массив входной строго неубывающий.

Идея: Важно учитывать, что с последнего элемента входной последователности всегда +duration к общему результу. Поэтому можно идти до .size() - 1.
И поэтому можно всгеда смотреть на следующий элемент. Всгеда в начале считаем до кого числа будет интоксикация. И если она больше либо равна 
следующему элементу, то к общему результату нужно добавить количество элементов до конечной точки интоксикации с учтом duration. 
Иначе, то есть всегда меньше, просто добавляем +duration к общему времени интоксикации.

P.S. Какая-то странная идея получилась. Нельзя компактно описать решение задачи. У меня получилось решить эту задачу с первого раза с помощью этой идеи и
прогонки некоторых корнер тестов, чисто смотря на решение и мои комментарии с примерами. Такое ощущение, что мне повезло решить задчу с первого раза.
Потому что как будто не до конца понимаю как работает мой алгоритм. Но очень хороший, быстрый, а главное понятный.

P.S.
12.06.2025
18:38
Выше представлена не идея, а решение. Идея должна умещаться максимум в 1-2 предложения.
*/

class Solution {
public:
    int findPoisonedDuration(std::vector<int>& TimeSeries, int Duration)
    {
        int ResultDuration = 0;
        for (size_t i = 0; i < TimeSeries.size() - 1; i++)
        {
            int ToxicEnd = TimeSeries[i] + Duration - 1;
            if (ToxicEnd >= TimeSeries[i + 1])
            {
                int AddDuration = TimeSeries[i + 1] - TimeSeries[i];
                ResultDuration += AddDuration;
            }
            else
            {
                ResultDuration += Duration;
            }
        }
        ResultDuration += Duration;
        return ResultDuration;
    }
};

// 29.04.2025
// 21:51 / SUCCESS / First my TBS solution with 0 leetcode test. Debug in brain!