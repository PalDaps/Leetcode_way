#include <iostream>
#include <vector>
#include <stack>

/*

16.08.2025
22:39

Задача: Да гистограмма высот, нужно определить максимальную площадь образованную высотами.

Идея: Стэк для хранения индексов всех столбцов наименьшевых левых столбцов относительно текущего.

Решение: 

1. Держим в стексе индексы строго не убывающих высот.
2. Если встречаем высоту, которая меньше, чем высота на топе стека, значит нужно посчитать все площади для высоты на топе стека
в пределах от этого меньшего элемента, до минимальной левой границы, которые перечислены в стеке.
3. Не забывать pop(), чтобы получать первый меньше слева.

P.S. 22:39 Сложно.

*/

class Solution
{
public:
    int largestRectangleArea(std::vector<int>& heights)
    {
        // Стэк, куда будем ложить индексы высот по неубыванию
        std::stack<int> OrderedInxHeights;
        int MaxArea = 0;
        heights.push_back(0);

        for (int i = 0; i < heights.size(); i++)
        {
            // Если стэк не пуст и текущая высота меньше высоты в стеке, то вычисляем для первой в стеке высоты
            // максимальную площадь, так как нашли для нее минимальную левую границу
            while (!OrderedInxHeights.empty() && heights[OrderedInxHeights.top()] > heights[i])
            {
                // забираем индекс, для которого будем считать максимальную площадь 
                int Top = heights[OrderedInxHeights.top()];
                // Удаляем этот индекс, чтобы найти минимальную правую границу
                OrderedInxHeights.pop();
                // Вычисляем положение левой границы. Если -1, то такой границы нет, считаем от начала.
                int Ran = OrderedInxHeights.empty() ? -1 : OrderedInxHeights.top();
                // Вычисляем площадь. Между двумя столбцами OrderedInxHeights.top() и i для вершины Top
                MaxArea = std::max(MaxArea, Top * (i - Ran - 1));
            }
            // Каждый раз добавляем индекс
            OrderedInxHeights.push(i);
        }
        return MaxArea;
    }
};